# Python CircleCI 2.0 configuration file
#
# Check https://circleci.com/docs/2.0/language-python/ for more details
#
version: 2.1

orbs:
  aws-eks: circleci/aws-eks@2.2.0
  aws-cli: circleci/aws-cli@4.1.2
  kubernetes: circleci/kubernetes@1.3.1

jobs:
  build_code:
    docker:
    # Use the same Docker base as the project
      - image: python:3.7.3-stretch

    working_directory: ~/repo

    steps:
      - checkout

      # Download and cache dependencies
      - restore_cache:
          keys:
          - v1-dependencies-{{ checksum "requirements.txt" }}
          # fallback to using the latest cache if no exact match is found
          - v1-dependencies-

      - run:
          name: install dependencies
          command: |
            python3 -m venv venv
            . venv/bin/activate
            make install
            # Install hadolint
            wget -O /bin/hadolint https://github.com/hadolint/hadolint/releases/download/v1.16.3/hadolint-Linux-x86_64 &&\
            chmod +x /bin/hadolint
      - save_cache:
          paths:
            - ./venv
          key: v1-dependencies-{{ checksum "requirements.txt" }}

      # run lint!
      - run:
          name: run lint
          command: |
            . venv/bin/activate
            make lint

  build_docker:
    docker:
      - image: circleci/node
    steps:
      - checkout
      - setup_remote_docker:
          version: 20.10.12
      - run:
          name: Build docker image
          command: |
            docker build --tag=$DOCKER_IMAGE_NAME .
            docker image ls
      - run: 
          name: Push docker image to DockerHub
          command: |
            docker login -u="$DOCKERHUB_USERNAME" -p="$DOCKERHUB_PASSWORD"
            docker tag $DOCKER_IMAGE_NAME $DOCKER_IMAGE_NAME:capstone
            docker push $DOCKER_IMAGE_NAME:capstone
  
  create_vpc:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Create K8s VPC
          command: |
             chmod +x ./cloudformation/scripts/create.sh
             ./cloudformation/scripts/create.sh Capstone-EKS-VPC ./cloudformation/k8s_vpc.yml ./cloudformation/vpc-parameters.json
             sleep 300
             echo "VPC is now ready."

  deploy_bastion_host:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Deploy runner instance
          command: |
            chmod +x ./cloudformation/scripts/create.sh
             ./cloudformation/scripts/create.sh BastionHost ./cloudformation/bastion_host.yml ./cloudformation/infra-parameters.json
            sleep 40
  
  get_ip:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
         name: Install dependencies
         command: |
            yum update && yum install -y \
              tar \
              gzip
      - run:
          name: Get Instance IP
          command: | 
            INSTANCE_IP=$(aws ec2 describe-instances --filters "Name=tag:Name,Values=BastionHost" --query "Reservations[*].Instances[*].PublicIpAddress" --output text)
            echo -e "$INSTANCE_IP" >> ansible/inventory.txt

      - persist_to_workspace:
          root: ~/
          paths:
            - project/ansible/inventory.txt

  configure_bastion:
    docker:
      - image: python:3.7-alpine3.11
    steps:
      - checkout
      - add_ssh_keys:
          # You can get this ID in the section where you registered the SSH Key
            fingerprints: ["SHA256:01ODfG5OsCcf7ztYjM3cXz4WYkGBXeEM1g3j4P6Ti6k"]
      - attach_workspace:
          at: ~/
      - run:
          name: Install dependencies
          command: |
            apk add --update ansible
            apk add tar gzip
      - run:
          name: Configure BastionHost
          command: |
            cd ~/project/ansible
            cat inventory.txt
            ansible-playbook -i inventory.txt configure_runner.yml
          

  create_cluster:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Create K8s Cluster
          command: |
             chmod +x ./cloudformation/scripts/create.sh
             ./cloudformation/scripts/create.sh Capstone-EKS-Cluster ./cloudformation/k8s_infra.yml ./cloudformation/infra-parameters.json
      

  cluster_availability:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: yum install -y jq
      - run:
          name: Check Cluster Availability
          command: |
             chmod +x ./cluster_availability.sh
             ./cluster_availability.sh
          no_output_timeout: 30m
  
  get_kubeconfig:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
         name: Install dependencies
         command: |
            yum update && yum install -y \
              tar \
              gzip
      - aws-cli/install
      - run:
          name: Get Kubeconfig
          command: aws eks --region us-east-1 update-kubeconfig --name Capstone_Cluster
      - persist_to_workspace:
          root: ~/
          paths:
            - project/
    
  deploy_app:
    docker:
      - image: amazon/aws-cli
    steps:
      - run:
         name: Install dependencies
         command: |
            yum update && yum install -y \
              tar \
              gzip
      - attach_workspace:
          at: ~/
      - run:
          name: Install dependencies
          command: |
            yum update && yum install -y \
              tar \
              gzip
      - aws-eks/update-kubeconfig-with-authenticator:
          cluster-name: Capstone_Cluster
      - kubernetes/create-or-update-resource:
          resource-file-path: ./app_deploy/capstone.yml

workflows:
  eks-cluster-deploy:
    jobs:
        - build_code
        - build_docker:
            requires: [build_code]
        - create_vpc
        - create_cluster:
            requires: [create_vpc]
        - cluster_availability:
            requires: [create_cluster]
        - get_kubeconfig:
            requires: [cluster_availability]
        - deploy_app:
            requires: [get_kubeconfig, cluster_availability, create_cluster]
